Brute Force
Time complexity- O(n^2)
Space Complexity - O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
    HashMap<Integer,Integer> map = new HashMap<>();
       for(int i=0; i<nums.length; i++){
           int a = nums[i];
           int left = target - a;
           if(map.containsKey(left)){
               return new int[]{map.get(left),i};
           }
           map.put(nums[i],i);
       }
       return new int[]{};
    }
}

Better approach
Time complexity- O(n*logn)
Space Complexity - O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
    HashMap<Integer,Integer> map = new HashMap<>();
       for(int i=0; i<nums.length; i++){
           int a = nums[i];
           int left = target - a;
           if(map.containsKey(left)){
               return new int[]{map.get(left),i};
           }
           map.put(nums[i],i);
       }
       return new int[]{};
    }
}
