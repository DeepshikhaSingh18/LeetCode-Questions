Most opimal solution using 2 pointers technique
Time complexity: O(NlogN)+O(N2), where N = size of the array.
Reason: The pointer i, is running for approximately N times. And both the pointers j and k combined can run for approximately N times including the operation of skipping duplicates. So the total time complexity will be O(N2). 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        for(int i=0; i<nums.length; i++){
            if(i != 0 && nums[i]== nums[i-1]) continue;

            int j = i+1;
            int k = n-1;
            while(j < k){
                int sum = nums[i]+nums[j]+nums[k];

                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                } else{
                    List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                    list.add(temp);
                    j++;
                    k--;
                     while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return list;
    }
}
